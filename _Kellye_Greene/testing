# Step 1: Working with Arrays and Hashes

# Copy your solution from conditional_teddit.rb.
# Create an empty stories array. This will be used to hold all stories we capture.
# Users enter the story as they do now, but it gets put in a hash instead.
# Update any reference to the story (upvotes, category and title)
# Your story hash should look like the one below:
# { title: "Monkeys thank mayor for flounder tooth necklace", category: "Teeth", upvotes: 1 }
# Add the hash to an array called stories and print "Story: Monkeys thank mayor for flounder tooth necklace, Category: (Teeth), Current Upvotes: 1"
# Using the stories array
# Test your cat, bacon, and food upvote conditional logic.
#
# Step 2: Adding Loops
# Use a loop, so that your program continues to ask a user for stories until they chose to quit. ("Would you like to add another story? Enter 'y' or 'n'")
# Once the user is finished with entering their stories, use .each to print each story in the stories array.

require 'json'
require 'rest-client'

def show_message(message)
  puts message
end

def get_search
  gets.strip
end

def get_results
  gets.strip
end

def show_new_story_notification(story)
  puts "New story added! #{story[:title]}, Category: #{story[:category].capitalize}, Current Upvotes: #{story[:upvotes]}"
end

def show_all_stories(stories)
  #Complete this section with both map and each. Highlight the difference of each.
  stories.map do |story|
    "Story: #{story[:title]},\n\n Category: (#{story[:category]}),\n\n Current Upvotes: #{story[:upvotes]}"
  end
end

def loop_through_stories(get_mapped_stories)
  get_mapped_stories.each do |story|
    puts "Would you like to continue reading?"
    user_answer = gets.chomp

    if user_answer == "y" || user_answer == "yes"
      puts "Testing yes"
      story.next
    end
    if user_answer == "n" || user_answer == "no"
      puts "Testing no"
    end
  end
end

def twitter
  res = JSON.load(RestClient.get('http://digg.com/api/news/popular.json'))
  res["data"]["feed"].map do |story|
    attributes = {title: story["content"]["title"], category: story["content"]["title"]}
    calculate_upvotes(attributes)
    show_new_story_notification(attributes)
    attributes
  end

end

puts "Welcome to Teddit! a text based news aggregator. Get today's news tomorrow!"
stories = twitter
get_mapped_stories = show_all_stories stories
puts loop_through_stories stories

